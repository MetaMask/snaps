diff --git a/dist/cjs/json.js b/dist/cjs/json.js
index 17e5663cd237a88fcdb3728a16b5b1219113babe..b4887029d6f7b56e73c54abb40c972d89cf2ce3f 100644
--- a/dist/cjs/json.js
+++ b/dist/cjs/json.js
@@ -9,6 +9,12 @@ function _export(target, all) {
     });
 }
 _export(exports, {
+    jsonObject: function() {
+        return jsonObject;
+    },
+    jsonOptional: function() {
+        return jsonOptional;
+    },
     UnsafeJsonStruct: function() {
         return UnsafeJsonStruct;
     },
@@ -105,6 +111,22 @@ _export(exports, {
 });
 const _superstruct = require("superstruct");
 const _assert = require("./assert");
+const _misc = require("./misc");
+const jsonObject = (schema)=>// The type is slightly different from a regular object struct, because we
+    // want to make properties with `undefined` in their type optional, but not
+    // `undefined` itself. This means that we need a type cast.
+    (0, _superstruct.object)(schema);
+const jsonOptional = (struct)=>(0, _superstruct.define)('optional', (value, context)=>{
+        const parent = context.branch[context.branch.length - 2];
+        const key = context.path[context.path.length - 1];
+        if (!(0, _misc.hasProperty)(parent, key)) {
+            return true;
+        }
+        if (value === undefined) {
+            return 'Expected a value, but received: undefined.';
+        }
+        return struct.validator(value, context);
+    });
 /**
  * A struct to check if the given value is finite number. Superstruct's
  * `number()` struct does not check if the value is finite.
@@ -153,25 +175,27 @@ const JsonRpcIdStruct = (0, _superstruct.nullable)((0, _superstruct.union)([
     (0, _superstruct.number)(),
     (0, _superstruct.string)()
 ]));
-const JsonRpcErrorStruct = (0, _superstruct.object)({
+const JsonRpcErrorStruct = jsonObject({
     code: (0, _superstruct.integer)(),
     message: (0, _superstruct.string)(),
-    data: (0, _superstruct.optional)(JsonStruct),
-    stack: (0, _superstruct.optional)((0, _superstruct.string)())
+    data: jsonOptional(JsonStruct),
+    stack: jsonOptional((0, _superstruct.string)())
 });
-const JsonRpcParamsStruct = (0, _superstruct.optional)((0, _superstruct.union)([
+const JsonRpcParamsStruct = (0, _superstruct.union)([
     (0, _superstruct.record)((0, _superstruct.string)(), JsonStruct),
     (0, _superstruct.array)(JsonStruct)
-]));
-const JsonRpcRequestStruct = (0, _superstruct.object)({
+]);
+const JsonRpcRequestStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     method: (0, _superstruct.string)(),
-    params: JsonRpcParamsStruct
+    params: jsonOptional(JsonRpcParamsStruct)
+});
+const JsonRpcNotificationStruct = jsonObject({
+    jsonrpc: JsonRpcVersionStruct,
+    method: (0, _superstruct.string)(),
+    params: jsonOptional(JsonRpcParamsStruct)
 });
-const JsonRpcNotificationStruct = (0, _superstruct.omit)(JsonRpcRequestStruct, [
-    'id'
-]);
 function isJsonRpcNotification(value) {
     return (0, _superstruct.is)(value, JsonRpcNotificationStruct);
 }
@@ -192,12 +216,12 @@ const PendingJsonRpcResponseStruct = (0, _superstruct.object)({
     result: (0, _superstruct.optional)((0, _superstruct.unknown)()),
     error: (0, _superstruct.optional)(JsonRpcErrorStruct)
 });
-const JsonRpcSuccessStruct = (0, _superstruct.object)({
+const JsonRpcSuccessStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     result: JsonStruct
 });
-const JsonRpcFailureStruct = (0, _superstruct.object)({
+const JsonRpcFailureStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     error: JsonRpcErrorStruct
diff --git a/dist/cjs/json.js.map b/dist/cjs/json.js.map
index 26bea6e257cc0f2d36ca93f5652254ed85d8720f..189ef8e19cd91b974c4e7d5e00b09308f47644e3 100644
--- a/dist/cjs/json.js.map
+++ b/dist/cjs/json.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/json.ts"],"sourcesContent":["import type { Infer, Struct } from 'superstruct';\nimport {\n  any,\n  array,\n  boolean,\n  coerce,\n  create,\n  define,\n  integer,\n  is,\n  lazy,\n  literal,\n  nullable,\n  number,\n  object,\n  omit,\n  optional,\n  record,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\n\nimport type { AssertionErrorConstructor } from './assert';\nimport { assertStruct } from './assert';\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () =>\n  define<number>('finite number', (value) => {\n    return is(value, number()) && Number.isFinite(value);\n  });\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexport const UnsafeJsonStruct: Struct<Json> = union([\n  literal(null),\n  boolean(),\n  finiteNumber(),\n  string(),\n  array(lazy(() => UnsafeJsonStruct)),\n  record(\n    string(),\n    lazy(() => UnsafeJsonStruct),\n  ),\n]);\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexport const JsonStruct = coerce(UnsafeJsonStruct, any(), (value) => {\n  assertStruct(value, UnsafeJsonStruct);\n  return JSON.parse(\n    JSON.stringify(value, (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === '__proto__' || propKey === 'constructor') {\n        return undefined;\n      }\n      return propValue;\n    }),\n  );\n});\n\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    getSafeJson(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nexport function getSafeJson<Type extends Json = Json>(value: unknown): Type {\n  return create(value, JsonStruct) as Type;\n}\n\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nexport function getJsonSize(value: unknown): number {\n  assertStruct(value, JsonStruct, 'Invalid JSON value');\n\n  const json = JSON.stringify(value);\n  return new TextEncoder().encode(json).byteLength;\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\nexport const JsonRpcVersionStruct = literal(jsonrpc2);\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\nexport const JsonRpcIdStruct = nullable(union([number(), string()]));\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = Infer<typeof JsonRpcIdStruct>;\n\nexport const JsonRpcErrorStruct = object({\n  code: integer(),\n  message: string(),\n  data: optional(JsonStruct),\n  stack: optional(string()),\n});\n\n/**\n * Mark a certain key of a type as optional.\n */\nexport type OptionalField<\n  Type extends Record<string, unknown>,\n  Key extends keyof Type,\n> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\n/**\n * A JSON-RPC error object.\n *\n * Note that TypeScript infers `unknown | undefined` as `unknown`, meaning that\n * the `data` field is not optional. To make it optional, we use the\n * `OptionalField` helper, to explicitly make it optional.\n */\nexport type JsonRpcError = OptionalField<\n  Infer<typeof JsonRpcErrorStruct>,\n  'data'\n>;\n\nexport const JsonRpcParamsStruct: Struct<Json[] | Record<string, Json>, null> =\n  optional(union([record(string(), JsonStruct), array(JsonStruct)])) as any;\n\nexport type JsonRpcParams = Json[] | Record<string, Json>;\n\nexport const JsonRpcRequestStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: JsonRpcParamsStruct,\n});\n\nexport type InferWithParams<\n  Type extends Struct<any>,\n  Params extends JsonRpcParams,\n> = Omit<Infer<Type>, 'params'> &\n  (keyof Params extends undefined\n    ? {\n        params?: Params;\n      }\n    : {\n        params: Params;\n      });\n\n/**\n * A JSON-RPC request object.\n */\nexport type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcRequestStruct, Params>;\n\nexport const JsonRpcNotificationStruct = omit(JsonRpcRequestStruct, ['id']);\n\n/**\n * A JSON-RPC notification object.\n */\nexport type JsonRpcNotification<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcNotificationStruct, Params>;\n\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nexport function isJsonRpcNotification(\n  value: unknown,\n): value is JsonRpcNotification {\n  return is(value, JsonRpcNotificationStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nexport function assertIsJsonRpcNotification(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcNotification {\n  assertStruct(\n    value,\n    JsonRpcNotificationStruct,\n    'Invalid JSON-RPC notification',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nexport function isJsonRpcRequest(value: unknown): value is JsonRpcRequest {\n  return is(value, JsonRpcRequestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nexport function assertIsJsonRpcRequest(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcRequest {\n  assertStruct(\n    value,\n    JsonRpcRequestStruct,\n    'Invalid JSON-RPC request',\n    ErrorWrapper,\n  );\n}\n\nexport const PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct),\n});\n\n/**\n * A JSON-RPC response object that has not yet been resolved.\n */\nexport type PendingJsonRpcResponse<Result extends Json> = Omit<\n  Infer<typeof PendingJsonRpcResponseStruct>,\n  'result'\n> & {\n  result?: Result;\n};\n\nexport const JsonRpcSuccessStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct,\n});\n\n/**\n * A successful JSON-RPC response object.\n */\nexport type JsonRpcSuccess<Result extends Json> = Omit<\n  Infer<typeof JsonRpcSuccessStruct>,\n  'result'\n> & {\n  result: Result;\n};\n\nexport const JsonRpcFailureStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct as Struct<JsonRpcError>,\n});\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = Infer<typeof JsonRpcFailureStruct>;\n\nexport const JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct,\n]);\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result extends Json> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nexport function isPendingJsonRpcResponse(\n  response: unknown,\n): response is PendingJsonRpcResponse<Json> {\n  return is(response, PendingJsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nexport function assertIsPendingJsonRpcResponse(\n  response: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts response is PendingJsonRpcResponse<Json> {\n  assertStruct(\n    response,\n    PendingJsonRpcResponseStruct,\n    'Invalid pending JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nexport function isJsonRpcResponse(\n  response: unknown,\n): response is JsonRpcResponse<Json> {\n  return is(response, JsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nexport function assertIsJsonRpcResponse(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcResponse<Json> {\n  assertStruct(\n    value,\n    JsonRpcResponseStruct,\n    'Invalid JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nexport function isJsonRpcSuccess(\n  value: unknown,\n): value is JsonRpcSuccess<Json> {\n  return is(value, JsonRpcSuccessStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nexport function assertIsJsonRpcSuccess(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcSuccess<Json> {\n  assertStruct(\n    value,\n    JsonRpcSuccessStruct,\n    'Invalid JSON-RPC success response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nexport function isJsonRpcFailure(value: unknown): value is JsonRpcFailure {\n  return is(value, JsonRpcFailureStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nexport function assertIsJsonRpcFailure(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcFailure {\n  assertStruct(\n    value,\n    JsonRpcFailureStruct,\n    'Invalid JSON-RPC failure response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nexport function isJsonRpcError(value: unknown): value is JsonRpcError {\n  return is(value, JsonRpcErrorStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nexport function assertIsJsonRpcError(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcError {\n  assertStruct(\n    value,\n    JsonRpcErrorStruct,\n    'Invalid JSON-RPC error',\n    ErrorWrapper,\n  );\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n\n  return isValidJsonRpcId;\n}\n"],"names":["UnsafeJsonStruct","JsonStruct","isValidJson","getSafeJson","getJsonSize","jsonrpc2","JsonRpcVersionStruct","JsonRpcIdStruct","JsonRpcErrorStruct","JsonRpcParamsStruct","JsonRpcRequestStruct","JsonRpcNotificationStruct","isJsonRpcNotification","assertIsJsonRpcNotification","isJsonRpcRequest","assertIsJsonRpcRequest","PendingJsonRpcResponseStruct","JsonRpcSuccessStruct","JsonRpcFailureStruct","JsonRpcResponseStruct","isPendingJsonRpcResponse","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","finiteNumber","define","value","is","number","Number","isFinite","union","literal","boolean","string","array","lazy","record","coerce","any","assertStruct","JSON","parse","stringify","propKey","propValue","undefined","create","json","TextEncoder","encode","byteLength","nullable","object","code","integer","message","data","optional","stack","id","jsonrpc","method","params","omit","ErrorWrapper","result","unknown","error","response","options","permitEmptyString","permitFractions","permitNull","isValidJsonRpcId","Boolean","isInteger","length"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"sources":["../../src/json.ts"],"sourcesContent":["import type { Infer, Struct } from 'superstruct';\nimport {\n  any,\n  array,\n  boolean,\n  coerce,\n  create,\n  define,\n  integer,\n  is,\n  lazy,\n  literal,\n  nullable,\n  number,\n  object as superstructObject,\n  object,\n  optional,\n  record,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\nimport type {\n  ObjectSchema,\n  OmitBy,\n  PickBy,\n  Simplify,\n} from 'superstruct/dist/utils';\n\nimport type { AssertionErrorConstructor } from './assert';\nimport { assertStruct } from './assert';\nimport { hasProperty } from './misc';\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * A helper type to make properties with `undefined` in their type optional, but\n * not `undefined` itself.\n *\n * @example\n * ```ts\n * type Foo = JsonOptional<{ foo: string | undefined }>;\n * // Foo is equivalent to { foo?: string }\n * ```\n */\nexport type JsonOptional<Schema extends Record<string, unknown>> = {\n  [Key in keyof PickBy<Schema, undefined>]?: Exclude<Schema[Key], undefined>;\n} & {\n  [Key in keyof OmitBy<Schema, undefined>]: Schema[Key];\n};\n\n/**\n * A JSON object type. This is used by the `json` struct. This uses the\n * {@link JsonOptional} helper to make properties with `undefined` in their type\n * optional, but not `undefined` itself.\n */\nexport type JsonObjectType<Schema extends ObjectSchema> = Simplify<\n  JsonOptional<{\n    [Key in keyof Schema]: Infer<Schema[Key]>;\n  }>\n>;\n\n/**\n * A struct to check if the given value is a valid JSON object.\n *\n * @param schema - The schema of the JSON object.\n * @returns A struct to check if the given value is a valid JSON object.\n */\nexport const jsonObject = <Schema extends ObjectSchema>(\n  schema: Schema,\n): Struct<JsonObjectType<Schema>> =>\n  // The type is slightly different from a regular object struct, because we\n  // want to make properties with `undefined` in their type optional, but not\n  // `undefined` itself. This means that we need a type cast.\n  superstructObject(schema) as unknown as Struct<JsonObjectType<Schema>>;\n\n/**\n * A struct to check if the given value is a valid JSON object, or not present.\n * This means that it allows an object which does not have the property, or an\n * object which has the property and is valid, but not an object which has the\n * property set to `undefined`.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is a valid JSON object, or not\n * present.\n */\nexport const jsonOptional = <Type, Schema>(\n  struct: Struct<Type, Schema>,\n): Struct<Type | undefined, null> =>\n  define('optional', (value, context) => {\n    const parent = context.branch[context.branch.length - 2];\n    const key = context.path[context.path.length - 1];\n\n    if (!hasProperty(parent, key)) {\n      return true;\n    }\n\n    if (value === undefined) {\n      return 'Expected a value, but received: undefined.';\n    }\n\n    return struct.validator(value, context);\n  });\n\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () =>\n  define<number>('finite number', (value) => {\n    return is(value, number()) && Number.isFinite(value);\n  });\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexport const UnsafeJsonStruct: Struct<Json> = union([\n  literal(null),\n  boolean(),\n  finiteNumber(),\n  string(),\n  array(lazy(() => UnsafeJsonStruct)),\n  record(\n    string(),\n    lazy(() => UnsafeJsonStruct),\n  ),\n]);\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexport const JsonStruct = coerce(UnsafeJsonStruct, any(), (value) => {\n  assertStruct(value, UnsafeJsonStruct);\n  return JSON.parse(\n    JSON.stringify(value, (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === '__proto__' || propKey === 'constructor') {\n        return undefined;\n      }\n      return propValue;\n    }),\n  );\n});\n\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    getSafeJson(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nexport function getSafeJson<Type extends Json = Json>(value: unknown): Type {\n  return create(value, JsonStruct) as Type;\n}\n\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nexport function getJsonSize(value: unknown): number {\n  assertStruct(value, JsonStruct, 'Invalid JSON value');\n\n  const json = JSON.stringify(value);\n  return new TextEncoder().encode(json).byteLength;\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\nexport const JsonRpcVersionStruct = literal(jsonrpc2);\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\nexport const JsonRpcIdStruct = nullable(union([number(), string()]));\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = Infer<typeof JsonRpcIdStruct>;\n\nexport const JsonRpcErrorStruct = jsonObject({\n  code: integer(),\n  message: string(),\n  data: jsonOptional(JsonStruct),\n  stack: jsonOptional(string()),\n});\n\n/**\n * Mark a certain key of a type as optional.\n */\nexport type OptionalField<\n  Type extends Record<string, unknown>,\n  Key extends keyof Type,\n> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\n/**\n * A JSON-RPC error object.\n *\n * Note that TypeScript infers `unknown | undefined` as `unknown`, meaning that\n * the `data` field is not optional. To make it optional, we use the\n * `OptionalField` helper, to explicitly make it optional.\n */\nexport type JsonRpcError = OptionalField<\n  Infer<typeof JsonRpcErrorStruct>,\n  'data'\n>;\n\nexport const JsonRpcParamsStruct: Struct<Json[] | Record<string, Json>, null> =\n  union([record(string(), JsonStruct), array(JsonStruct)]);\n\nexport type JsonRpcParams = Json[] | Record<string, Json>;\n\nexport const JsonRpcRequestStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: jsonOptional(JsonRpcParamsStruct),\n});\n\nexport type InferWithParams<\n  Type extends Struct<any>,\n  Params extends JsonRpcParams,\n> = Infer<Type> & {\n  params?: Params;\n};\n\n/**\n * A JSON-RPC request object.\n */\nexport type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcRequestStruct, Params>;\n\nexport const JsonRpcNotificationStruct = jsonObject({\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: jsonOptional(JsonRpcParamsStruct),\n});\n\n/**\n * A JSON-RPC notification object.\n */\nexport type JsonRpcNotification<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcNotificationStruct, Params>;\n\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nexport function isJsonRpcNotification(\n  value: unknown,\n): value is JsonRpcNotification {\n  return is(value, JsonRpcNotificationStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nexport function assertIsJsonRpcNotification(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcNotification {\n  assertStruct(\n    value,\n    JsonRpcNotificationStruct,\n    'Invalid JSON-RPC notification',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nexport function isJsonRpcRequest(value: unknown): value is JsonRpcRequest {\n  return is(value, JsonRpcRequestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nexport function assertIsJsonRpcRequest(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcRequest {\n  assertStruct(\n    value,\n    JsonRpcRequestStruct,\n    'Invalid JSON-RPC request',\n    ErrorWrapper,\n  );\n}\n\nexport const PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct),\n});\n\n/**\n * A JSON-RPC response object that has not yet been resolved.\n */\nexport type PendingJsonRpcResponse<Result extends Json> = Omit<\n  Infer<typeof PendingJsonRpcResponseStruct>,\n  'result'\n> & {\n  result?: Result;\n};\n\nexport const JsonRpcSuccessStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct,\n});\n\n/**\n * A successful JSON-RPC response object.\n */\nexport type JsonRpcSuccess<Result extends Json> = Omit<\n  Infer<typeof JsonRpcSuccessStruct>,\n  'result'\n> & {\n  result: Result;\n};\n\nexport const JsonRpcFailureStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct as Struct<JsonRpcError>,\n});\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = Infer<typeof JsonRpcFailureStruct>;\n\nexport const JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct,\n]);\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result extends Json> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nexport function isPendingJsonRpcResponse(\n  response: unknown,\n): response is PendingJsonRpcResponse<Json> {\n  return is(response, PendingJsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nexport function assertIsPendingJsonRpcResponse(\n  response: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts response is PendingJsonRpcResponse<Json> {\n  assertStruct(\n    response,\n    PendingJsonRpcResponseStruct,\n    'Invalid pending JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nexport function isJsonRpcResponse(\n  response: unknown,\n): response is JsonRpcResponse<Json> {\n  return is(response, JsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nexport function assertIsJsonRpcResponse(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcResponse<Json> {\n  assertStruct(\n    value,\n    JsonRpcResponseStruct,\n    'Invalid JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nexport function isJsonRpcSuccess(\n  value: unknown,\n): value is JsonRpcSuccess<Json> {\n  return is(value, JsonRpcSuccessStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nexport function assertIsJsonRpcSuccess(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcSuccess<Json> {\n  assertStruct(\n    value,\n    JsonRpcSuccessStruct,\n    'Invalid JSON-RPC success response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nexport function isJsonRpcFailure(value: unknown): value is JsonRpcFailure {\n  return is(value, JsonRpcFailureStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nexport function assertIsJsonRpcFailure(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcFailure {\n  assertStruct(\n    value,\n    JsonRpcFailureStruct,\n    'Invalid JSON-RPC failure response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nexport function isJsonRpcError(value: unknown): value is JsonRpcError {\n  return is(value, JsonRpcErrorStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nexport function assertIsJsonRpcError(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcError {\n  assertStruct(\n    value,\n    JsonRpcErrorStruct,\n    'Invalid JSON-RPC error',\n    ErrorWrapper,\n  );\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n\n  return isValidJsonRpcId;\n}\n"],"names":["jsonObject","jsonOptional","UnsafeJsonStruct","JsonStruct","isValidJson","getSafeJson","getJsonSize","jsonrpc2","JsonRpcVersionStruct","JsonRpcIdStruct","JsonRpcErrorStruct","JsonRpcParamsStruct","JsonRpcRequestStruct","JsonRpcNotificationStruct","isJsonRpcNotification","assertIsJsonRpcNotification","isJsonRpcRequest","assertIsJsonRpcRequest","PendingJsonRpcResponseStruct","JsonRpcSuccessStruct","JsonRpcFailureStruct","JsonRpcResponseStruct","isPendingJsonRpcResponse","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","schema","superstructObject","struct","define","value","context","parent","branch","length","key","path","hasProperty","undefined","validator","finiteNumber","is","number","Number","isFinite","union","literal","boolean","string","array","lazy","record","coerce","any","assertStruct","JSON","parse","stringify","propKey","propValue","create","json","TextEncoder","encode","byteLength","nullable","code","integer","message","data","stack","id","jsonrpc","method","params","ErrorWrapper","object","result","optional","unknown","error","response","options","permitEmptyString","permitFractions","permitNull","isValidJsonRpcId","Boolean","isInteger"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/json.js b/dist/esm/json.js
index 2c039cccf11893d2d88fc4fb666e7836c9a42325..79cff5f24af419080633f3be7f8971309ea8bcbb 100644
--- a/dist/esm/json.js
+++ b/dist/esm/json.js
@@ -1,5 +1,35 @@
-import { any, array, boolean, coerce, create, define, integer, is, lazy, literal, nullable, number, object, omit, optional, record, string, union, unknown } from 'superstruct';
+import { any, array, boolean, coerce, create, define, integer, is, lazy, literal, nullable, number, object as superstructObject, object, optional, record, string, union, unknown } from 'superstruct';
 import { assertStruct } from './assert';
+import { hasProperty } from './misc';
+/**
+ * A struct to check if the given value is a valid JSON object.
+ *
+ * @param schema - The schema of the JSON object.
+ * @returns A struct to check if the given value is a valid JSON object.
+ */ export const jsonObject = (schema)=>// The type is slightly different from a regular object struct, because we
+    // want to make properties with `undefined` in their type optional, but not
+    // `undefined` itself. This means that we need a type cast.
+    superstructObject(schema);
+/**
+ * A struct to check if the given value is a valid JSON object, or not present.
+ * This means that it allows an object which does not have the property, or an
+ * object which has the property and is valid, but not an object which has the
+ * property set to `undefined`.
+ *
+ * @param struct - The struct to check the value against, if present.
+ * @returns A struct to check if the given value is a valid JSON object, or not
+ * present.
+ */ export const jsonOptional = (struct)=>define('optional', (value, context)=>{
+        const parent = context.branch[context.branch.length - 2];
+        const key = context.path[context.path.length - 1];
+        if (!hasProperty(parent, key)) {
+            return true;
+        }
+        if (value === undefined) {
+            return 'Expected a value, but received: undefined.';
+        }
+        return struct.validator(value, context);
+    });
 /**
  * A struct to check if the given value is finite number. Superstruct's
  * `number()` struct does not check if the value is finite.
@@ -82,25 +112,27 @@ export const JsonRpcIdStruct = nullable(union([
     number(),
     string()
 ]));
-export const JsonRpcErrorStruct = object({
+export const JsonRpcErrorStruct = jsonObject({
     code: integer(),
     message: string(),
-    data: optional(JsonStruct),
-    stack: optional(string())
+    data: jsonOptional(JsonStruct),
+    stack: jsonOptional(string())
 });
-export const JsonRpcParamsStruct = optional(union([
+export const JsonRpcParamsStruct = union([
     record(string(), JsonStruct),
     array(JsonStruct)
-]));
-export const JsonRpcRequestStruct = object({
+]);
+export const JsonRpcRequestStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     method: string(),
-    params: JsonRpcParamsStruct
+    params: jsonOptional(JsonRpcParamsStruct)
+});
+export const JsonRpcNotificationStruct = jsonObject({
+    jsonrpc: JsonRpcVersionStruct,
+    method: string(),
+    params: jsonOptional(JsonRpcParamsStruct)
 });
-export const JsonRpcNotificationStruct = omit(JsonRpcRequestStruct, [
-    'id'
-]);
 /**
  * Check if the given value is a valid {@link JsonRpcNotification} object.
  *
@@ -146,12 +178,12 @@ export const PendingJsonRpcResponseStruct = object({
     result: optional(unknown()),
     error: optional(JsonRpcErrorStruct)
 });
-export const JsonRpcSuccessStruct = object({
+export const JsonRpcSuccessStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     result: JsonStruct
 });
-export const JsonRpcFailureStruct = object({
+export const JsonRpcFailureStruct = jsonObject({
     id: JsonRpcIdStruct,
     jsonrpc: JsonRpcVersionStruct,
     error: JsonRpcErrorStruct
diff --git a/dist/esm/json.js.map b/dist/esm/json.js.map
index ae3392c53e52a601e18ce8991dc6e4414a50123f..e1cbb6fabf0a3a36cf3260a3a7d8b37a1f95ac24 100644
--- a/dist/esm/json.js.map
+++ b/dist/esm/json.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/json.ts"],"sourcesContent":["import type { Infer, Struct } from 'superstruct';\nimport {\n  any,\n  array,\n  boolean,\n  coerce,\n  create,\n  define,\n  integer,\n  is,\n  lazy,\n  literal,\n  nullable,\n  number,\n  object,\n  omit,\n  optional,\n  record,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\n\nimport type { AssertionErrorConstructor } from './assert';\nimport { assertStruct } from './assert';\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () =>\n  define<number>('finite number', (value) => {\n    return is(value, number()) && Number.isFinite(value);\n  });\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexport const UnsafeJsonStruct: Struct<Json> = union([\n  literal(null),\n  boolean(),\n  finiteNumber(),\n  string(),\n  array(lazy(() => UnsafeJsonStruct)),\n  record(\n    string(),\n    lazy(() => UnsafeJsonStruct),\n  ),\n]);\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexport const JsonStruct = coerce(UnsafeJsonStruct, any(), (value) => {\n  assertStruct(value, UnsafeJsonStruct);\n  return JSON.parse(\n    JSON.stringify(value, (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === '__proto__' || propKey === 'constructor') {\n        return undefined;\n      }\n      return propValue;\n    }),\n  );\n});\n\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    getSafeJson(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nexport function getSafeJson<Type extends Json = Json>(value: unknown): Type {\n  return create(value, JsonStruct) as Type;\n}\n\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nexport function getJsonSize(value: unknown): number {\n  assertStruct(value, JsonStruct, 'Invalid JSON value');\n\n  const json = JSON.stringify(value);\n  return new TextEncoder().encode(json).byteLength;\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\nexport const JsonRpcVersionStruct = literal(jsonrpc2);\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\nexport const JsonRpcIdStruct = nullable(union([number(), string()]));\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = Infer<typeof JsonRpcIdStruct>;\n\nexport const JsonRpcErrorStruct = object({\n  code: integer(),\n  message: string(),\n  data: optional(JsonStruct),\n  stack: optional(string()),\n});\n\n/**\n * Mark a certain key of a type as optional.\n */\nexport type OptionalField<\n  Type extends Record<string, unknown>,\n  Key extends keyof Type,\n> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\n/**\n * A JSON-RPC error object.\n *\n * Note that TypeScript infers `unknown | undefined` as `unknown`, meaning that\n * the `data` field is not optional. To make it optional, we use the\n * `OptionalField` helper, to explicitly make it optional.\n */\nexport type JsonRpcError = OptionalField<\n  Infer<typeof JsonRpcErrorStruct>,\n  'data'\n>;\n\nexport const JsonRpcParamsStruct: Struct<Json[] | Record<string, Json>, null> =\n  optional(union([record(string(), JsonStruct), array(JsonStruct)])) as any;\n\nexport type JsonRpcParams = Json[] | Record<string, Json>;\n\nexport const JsonRpcRequestStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: JsonRpcParamsStruct,\n});\n\nexport type InferWithParams<\n  Type extends Struct<any>,\n  Params extends JsonRpcParams,\n> = Omit<Infer<Type>, 'params'> &\n  (keyof Params extends undefined\n    ? {\n        params?: Params;\n      }\n    : {\n        params: Params;\n      });\n\n/**\n * A JSON-RPC request object.\n */\nexport type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcRequestStruct, Params>;\n\nexport const JsonRpcNotificationStruct = omit(JsonRpcRequestStruct, ['id']);\n\n/**\n * A JSON-RPC notification object.\n */\nexport type JsonRpcNotification<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcNotificationStruct, Params>;\n\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nexport function isJsonRpcNotification(\n  value: unknown,\n): value is JsonRpcNotification {\n  return is(value, JsonRpcNotificationStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nexport function assertIsJsonRpcNotification(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcNotification {\n  assertStruct(\n    value,\n    JsonRpcNotificationStruct,\n    'Invalid JSON-RPC notification',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nexport function isJsonRpcRequest(value: unknown): value is JsonRpcRequest {\n  return is(value, JsonRpcRequestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nexport function assertIsJsonRpcRequest(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcRequest {\n  assertStruct(\n    value,\n    JsonRpcRequestStruct,\n    'Invalid JSON-RPC request',\n    ErrorWrapper,\n  );\n}\n\nexport const PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct),\n});\n\n/**\n * A JSON-RPC response object that has not yet been resolved.\n */\nexport type PendingJsonRpcResponse<Result extends Json> = Omit<\n  Infer<typeof PendingJsonRpcResponseStruct>,\n  'result'\n> & {\n  result?: Result;\n};\n\nexport const JsonRpcSuccessStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct,\n});\n\n/**\n * A successful JSON-RPC response object.\n */\nexport type JsonRpcSuccess<Result extends Json> = Omit<\n  Infer<typeof JsonRpcSuccessStruct>,\n  'result'\n> & {\n  result: Result;\n};\n\nexport const JsonRpcFailureStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct as Struct<JsonRpcError>,\n});\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = Infer<typeof JsonRpcFailureStruct>;\n\nexport const JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct,\n]);\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result extends Json> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nexport function isPendingJsonRpcResponse(\n  response: unknown,\n): response is PendingJsonRpcResponse<Json> {\n  return is(response, PendingJsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nexport function assertIsPendingJsonRpcResponse(\n  response: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts response is PendingJsonRpcResponse<Json> {\n  assertStruct(\n    response,\n    PendingJsonRpcResponseStruct,\n    'Invalid pending JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nexport function isJsonRpcResponse(\n  response: unknown,\n): response is JsonRpcResponse<Json> {\n  return is(response, JsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nexport function assertIsJsonRpcResponse(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcResponse<Json> {\n  assertStruct(\n    value,\n    JsonRpcResponseStruct,\n    'Invalid JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nexport function isJsonRpcSuccess(\n  value: unknown,\n): value is JsonRpcSuccess<Json> {\n  return is(value, JsonRpcSuccessStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nexport function assertIsJsonRpcSuccess(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcSuccess<Json> {\n  assertStruct(\n    value,\n    JsonRpcSuccessStruct,\n    'Invalid JSON-RPC success response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nexport function isJsonRpcFailure(value: unknown): value is JsonRpcFailure {\n  return is(value, JsonRpcFailureStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nexport function assertIsJsonRpcFailure(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcFailure {\n  assertStruct(\n    value,\n    JsonRpcFailureStruct,\n    'Invalid JSON-RPC failure response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nexport function isJsonRpcError(value: unknown): value is JsonRpcError {\n  return is(value, JsonRpcErrorStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nexport function assertIsJsonRpcError(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcError {\n  assertStruct(\n    value,\n    JsonRpcErrorStruct,\n    'Invalid JSON-RPC error',\n    ErrorWrapper,\n  );\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n\n  return isValidJsonRpcId;\n}\n"],"names":["any","array","boolean","coerce","create","define","integer","is","lazy","literal","nullable","number","object","omit","optional","record","string","union","unknown","assertStruct","finiteNumber","value","Number","isFinite","UnsafeJsonStruct","JsonStruct","JSON","parse","stringify","propKey","propValue","undefined","isValidJson","getSafeJson","getJsonSize","json","TextEncoder","encode","byteLength","jsonrpc2","JsonRpcVersionStruct","JsonRpcIdStruct","JsonRpcErrorStruct","code","message","data","stack","JsonRpcParamsStruct","JsonRpcRequestStruct","id","jsonrpc","method","params","JsonRpcNotificationStruct","isJsonRpcNotification","assertIsJsonRpcNotification","ErrorWrapper","isJsonRpcRequest","assertIsJsonRpcRequest","PendingJsonRpcResponseStruct","result","error","JsonRpcSuccessStruct","JsonRpcFailureStruct","JsonRpcResponseStruct","isPendingJsonRpcResponse","response","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","options","permitEmptyString","permitFractions","permitNull","isValidJsonRpcId","Boolean","isInteger","length"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"sources":["../../src/json.ts"],"sourcesContent":["import type { Infer, Struct } from 'superstruct';\nimport {\n  any,\n  array,\n  boolean,\n  coerce,\n  create,\n  define,\n  integer,\n  is,\n  lazy,\n  literal,\n  nullable,\n  number,\n  object as superstructObject,\n  object,\n  optional,\n  record,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\nimport type {\n  ObjectSchema,\n  OmitBy,\n  PickBy,\n  Simplify,\n} from 'superstruct/dist/utils';\n\nimport type { AssertionErrorConstructor } from './assert';\nimport { assertStruct } from './assert';\nimport { hasProperty } from './misc';\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * A helper type to make properties with `undefined` in their type optional, but\n * not `undefined` itself.\n *\n * @example\n * ```ts\n * type Foo = JsonOptional<{ foo: string | undefined }>;\n * // Foo is equivalent to { foo?: string }\n * ```\n */\nexport type JsonOptional<Schema extends Record<string, unknown>> = {\n  [Key in keyof PickBy<Schema, undefined>]?: Exclude<Schema[Key], undefined>;\n} & {\n  [Key in keyof OmitBy<Schema, undefined>]: Schema[Key];\n};\n\n/**\n * A JSON object type. This is used by the `json` struct. This uses the\n * {@link JsonOptional} helper to make properties with `undefined` in their type\n * optional, but not `undefined` itself.\n */\nexport type JsonObjectType<Schema extends ObjectSchema> = Simplify<\n  JsonOptional<{\n    [Key in keyof Schema]: Infer<Schema[Key]>;\n  }>\n>;\n\n/**\n * A struct to check if the given value is a valid JSON object.\n *\n * @param schema - The schema of the JSON object.\n * @returns A struct to check if the given value is a valid JSON object.\n */\nexport const jsonObject = <Schema extends ObjectSchema>(\n  schema: Schema,\n): Struct<JsonObjectType<Schema>> =>\n  // The type is slightly different from a regular object struct, because we\n  // want to make properties with `undefined` in their type optional, but not\n  // `undefined` itself. This means that we need a type cast.\n  superstructObject(schema) as unknown as Struct<JsonObjectType<Schema>>;\n\n/**\n * A struct to check if the given value is a valid JSON object, or not present.\n * This means that it allows an object which does not have the property, or an\n * object which has the property and is valid, but not an object which has the\n * property set to `undefined`.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is a valid JSON object, or not\n * present.\n */\nexport const jsonOptional = <Type, Schema>(\n  struct: Struct<Type, Schema>,\n): Struct<Type | undefined, null> =>\n  define('optional', (value, context) => {\n    const parent = context.branch[context.branch.length - 2];\n    const key = context.path[context.path.length - 1];\n\n    if (!hasProperty(parent, key)) {\n      return true;\n    }\n\n    if (value === undefined) {\n      return 'Expected a value, but received: undefined.';\n    }\n\n    return struct.validator(value, context);\n  });\n\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () =>\n  define<number>('finite number', (value) => {\n    return is(value, number()) && Number.isFinite(value);\n  });\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexport const UnsafeJsonStruct: Struct<Json> = union([\n  literal(null),\n  boolean(),\n  finiteNumber(),\n  string(),\n  array(lazy(() => UnsafeJsonStruct)),\n  record(\n    string(),\n    lazy(() => UnsafeJsonStruct),\n  ),\n]);\n\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexport const JsonStruct = coerce(UnsafeJsonStruct, any(), (value) => {\n  assertStruct(value, UnsafeJsonStruct);\n  return JSON.parse(\n    JSON.stringify(value, (propKey, propValue) => {\n      // Strip __proto__ and constructor properties to prevent prototype pollution.\n      if (propKey === '__proto__' || propKey === 'constructor') {\n        return undefined;\n      }\n      return propValue;\n    }),\n  );\n});\n\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nexport function isValidJson(value: unknown): value is Json {\n  try {\n    getSafeJson(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nexport function getSafeJson<Type extends Json = Json>(value: unknown): Type {\n  return create(value, JsonStruct) as Type;\n}\n\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nexport function getJsonSize(value: unknown): number {\n  assertStruct(value, JsonStruct, 'Invalid JSON value');\n\n  const json = JSON.stringify(value);\n  return new TextEncoder().encode(json).byteLength;\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\nexport const JsonRpcVersionStruct = literal(jsonrpc2);\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\nexport const JsonRpcIdStruct = nullable(union([number(), string()]));\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = Infer<typeof JsonRpcIdStruct>;\n\nexport const JsonRpcErrorStruct = jsonObject({\n  code: integer(),\n  message: string(),\n  data: jsonOptional(JsonStruct),\n  stack: jsonOptional(string()),\n});\n\n/**\n * Mark a certain key of a type as optional.\n */\nexport type OptionalField<\n  Type extends Record<string, unknown>,\n  Key extends keyof Type,\n> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\n/**\n * A JSON-RPC error object.\n *\n * Note that TypeScript infers `unknown | undefined` as `unknown`, meaning that\n * the `data` field is not optional. To make it optional, we use the\n * `OptionalField` helper, to explicitly make it optional.\n */\nexport type JsonRpcError = OptionalField<\n  Infer<typeof JsonRpcErrorStruct>,\n  'data'\n>;\n\nexport const JsonRpcParamsStruct: Struct<Json[] | Record<string, Json>, null> =\n  union([record(string(), JsonStruct), array(JsonStruct)]);\n\nexport type JsonRpcParams = Json[] | Record<string, Json>;\n\nexport const JsonRpcRequestStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: jsonOptional(JsonRpcParamsStruct),\n});\n\nexport type InferWithParams<\n  Type extends Struct<any>,\n  Params extends JsonRpcParams,\n> = Infer<Type> & {\n  params?: Params;\n};\n\n/**\n * A JSON-RPC request object.\n */\nexport type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcRequestStruct, Params>;\n\nexport const JsonRpcNotificationStruct = jsonObject({\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: jsonOptional(JsonRpcParamsStruct),\n});\n\n/**\n * A JSON-RPC notification object.\n */\nexport type JsonRpcNotification<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcNotificationStruct, Params>;\n\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nexport function isJsonRpcNotification(\n  value: unknown,\n): value is JsonRpcNotification {\n  return is(value, JsonRpcNotificationStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nexport function assertIsJsonRpcNotification(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcNotification {\n  assertStruct(\n    value,\n    JsonRpcNotificationStruct,\n    'Invalid JSON-RPC notification',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nexport function isJsonRpcRequest(value: unknown): value is JsonRpcRequest {\n  return is(value, JsonRpcRequestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nexport function assertIsJsonRpcRequest(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcRequest {\n  assertStruct(\n    value,\n    JsonRpcRequestStruct,\n    'Invalid JSON-RPC request',\n    ErrorWrapper,\n  );\n}\n\nexport const PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct),\n});\n\n/**\n * A JSON-RPC response object that has not yet been resolved.\n */\nexport type PendingJsonRpcResponse<Result extends Json> = Omit<\n  Infer<typeof PendingJsonRpcResponseStruct>,\n  'result'\n> & {\n  result?: Result;\n};\n\nexport const JsonRpcSuccessStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct,\n});\n\n/**\n * A successful JSON-RPC response object.\n */\nexport type JsonRpcSuccess<Result extends Json> = Omit<\n  Infer<typeof JsonRpcSuccessStruct>,\n  'result'\n> & {\n  result: Result;\n};\n\nexport const JsonRpcFailureStruct = jsonObject({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct as Struct<JsonRpcError>,\n});\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = Infer<typeof JsonRpcFailureStruct>;\n\nexport const JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct,\n]);\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result extends Json> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nexport function isPendingJsonRpcResponse(\n  response: unknown,\n): response is PendingJsonRpcResponse<Json> {\n  return is(response, PendingJsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nexport function assertIsPendingJsonRpcResponse(\n  response: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts response is PendingJsonRpcResponse<Json> {\n  assertStruct(\n    response,\n    PendingJsonRpcResponseStruct,\n    'Invalid pending JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nexport function isJsonRpcResponse(\n  response: unknown,\n): response is JsonRpcResponse<Json> {\n  return is(response, JsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nexport function assertIsJsonRpcResponse(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcResponse<Json> {\n  assertStruct(\n    value,\n    JsonRpcResponseStruct,\n    'Invalid JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nexport function isJsonRpcSuccess(\n  value: unknown,\n): value is JsonRpcSuccess<Json> {\n  return is(value, JsonRpcSuccessStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nexport function assertIsJsonRpcSuccess(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcSuccess<Json> {\n  assertStruct(\n    value,\n    JsonRpcSuccessStruct,\n    'Invalid JSON-RPC success response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nexport function isJsonRpcFailure(value: unknown): value is JsonRpcFailure {\n  return is(value, JsonRpcFailureStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nexport function assertIsJsonRpcFailure(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcFailure {\n  assertStruct(\n    value,\n    JsonRpcFailureStruct,\n    'Invalid JSON-RPC failure response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nexport function isJsonRpcError(value: unknown): value is JsonRpcError {\n  return is(value, JsonRpcErrorStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nexport function assertIsJsonRpcError(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcError {\n  assertStruct(\n    value,\n    JsonRpcErrorStruct,\n    'Invalid JSON-RPC error',\n    ErrorWrapper,\n  );\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n\n  return isValidJsonRpcId;\n}\n"],"names":["any","array","boolean","coerce","create","define","integer","is","lazy","literal","nullable","number","object","superstructObject","optional","record","string","union","unknown","assertStruct","hasProperty","jsonObject","schema","jsonOptional","struct","value","context","parent","branch","length","key","path","undefined","validator","finiteNumber","Number","isFinite","UnsafeJsonStruct","JsonStruct","JSON","parse","stringify","propKey","propValue","isValidJson","getSafeJson","getJsonSize","json","TextEncoder","encode","byteLength","jsonrpc2","JsonRpcVersionStruct","JsonRpcIdStruct","JsonRpcErrorStruct","code","message","data","stack","JsonRpcParamsStruct","JsonRpcRequestStruct","id","jsonrpc","method","params","JsonRpcNotificationStruct","isJsonRpcNotification","assertIsJsonRpcNotification","ErrorWrapper","isJsonRpcRequest","assertIsJsonRpcRequest","PendingJsonRpcResponseStruct","result","error","JsonRpcSuccessStruct","JsonRpcFailureStruct","JsonRpcResponseStruct","isPendingJsonRpcResponse","response","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","options","permitEmptyString","permitFractions","permitNull","isValidJsonRpcId","Boolean","isInteger"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types/json.d.ts b/dist/types/json.d.ts
index 1533dcbb925903367f6cf082a4a54d5aa306caf9..11d6980ca424799d50f1182e7fb72987f4066a80 100644
--- a/dist/types/json.d.ts
+++ b/dist/types/json.d.ts
@@ -1,4 +1,5 @@
 import type { Infer, Struct } from 'superstruct';
+import type { ObjectSchema, OmitBy, PickBy, Simplify } from 'superstruct/dist/utils';
 import type { AssertionErrorConstructor } from './assert';
 /**
  * Any JSON-compatible value.
@@ -6,6 +7,47 @@ import type { AssertionErrorConstructor } from './assert';
 export declare type Json = null | boolean | number | string | Json[] | {
     [prop: string]: Json;
 };
+/**
+ * A helper type to make properties with `undefined` in their type optional, but
+ * not `undefined` itself.
+ *
+ * @example
+ * ```ts
+ * type Foo = JsonOptional<{ foo: string | undefined }>;
+ * // Foo is equivalent to { foo?: string }
+ * ```
+ */
+export declare type JsonOptional<Schema extends Record<string, unknown>> = {
+    [Key in keyof PickBy<Schema, undefined>]?: Exclude<Schema[Key], undefined>;
+} & {
+    [Key in keyof OmitBy<Schema, undefined>]: Schema[Key];
+};
+/**
+ * A JSON object type. This is used by the `json` struct. This uses the
+ * {@link JsonOptional} helper to make properties with `undefined` in their type
+ * optional, but not `undefined` itself.
+ */
+export declare type JsonObjectType<Schema extends ObjectSchema> = Simplify<JsonOptional<{
+    [Key in keyof Schema]: Infer<Schema[Key]>;
+}>>;
+/**
+ * A struct to check if the given value is a valid JSON object.
+ *
+ * @param schema - The schema of the JSON object.
+ * @returns A struct to check if the given value is a valid JSON object.
+ */
+export declare const jsonObject: <Schema extends ObjectSchema>(schema: Schema) => Struct<Simplify<JsonOptional<{ [Key in keyof Schema]: Infer<Schema[Key]>; }>>, unknown>;
+/**
+ * A struct to check if the given value is a valid JSON object, or not present.
+ * This means that it allows an object which does not have the property, or an
+ * object which has the property and is valid, but not an object which has the
+ * property set to `undefined`.
+ *
+ * @param struct - The struct to check the value against, if present.
+ * @returns A struct to check if the given value is a valid JSON object, or not
+ * present.
+ */
+export declare const jsonOptional: <Type, Schema>(struct: Struct<Type, Schema>) => Struct<Type | undefined, null>;
 /**
  * A struct to check if the given value is a valid JSON-serializable value.
  *
@@ -66,16 +108,11 @@ export declare const JsonRpcIdStruct: Struct<string | number | null, null>;
  */
 export declare type JsonRpcId = Infer<typeof JsonRpcIdStruct>;
 export declare const JsonRpcErrorStruct: Struct<{
+    data?: Json;
+    stack?: string;
     code: number;
     message: string;
-    data?: Json | undefined;
-    stack?: string | undefined;
-}, {
-    code: Struct<number, null>;
-    message: Struct<string, null>;
-    data: Struct<Json | undefined, unknown>;
-    stack: Struct<string | undefined, null>;
-}>;
+}, unknown>;
 /**
  * Mark a certain key of a type as optional.
  */
@@ -91,35 +128,23 @@ export declare type JsonRpcError = OptionalField<Infer<typeof JsonRpcErrorStruct
 export declare const JsonRpcParamsStruct: Struct<Json[] | Record<string, Json>, null>;
 export declare type JsonRpcParams = Json[] | Record<string, Json>;
 export declare const JsonRpcRequestStruct: Struct<{
+    params?: Json[] | Record<string, Json>;
     id: string | number | null;
     method: string;
     jsonrpc: "2.0";
-    params: Json[] | Record<string, Json>;
-}, {
-    id: Struct<string | number | null, null>;
-    jsonrpc: Struct<"2.0", "2.0">;
-    method: Struct<string, null>;
-    params: Struct<Json[] | Record<string, Json>, null>;
-}>;
-export declare type InferWithParams<Type extends Struct<any>, Params extends JsonRpcParams> = Omit<Infer<Type>, 'params'> & (keyof Params extends undefined ? {
+}, unknown>;
+export declare type InferWithParams<Type extends Struct<any>, Params extends JsonRpcParams> = Infer<Type> & {
     params?: Params;
-} : {
-    params: Params;
-});
+};
 /**
  * A JSON-RPC request object.
  */
 export declare type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> = InferWithParams<typeof JsonRpcRequestStruct, Params>;
 export declare const JsonRpcNotificationStruct: Struct<{
+    params?: Json[] | Record<string, Json>;
     method: string;
     jsonrpc: "2.0";
-    params: Json[] | Record<string, Json>;
-}, Omit<{
-    id: Struct<string | number | null, null>;
-    jsonrpc: Struct<"2.0", "2.0">;
-    method: Struct<string, null>;
-    params: Struct<Json[] | Record<string, Json>, null>;
-}, "id">>;
+}, unknown>;
 /**
  * A JSON-RPC notification object.
  */
@@ -162,26 +187,21 @@ export declare const PendingJsonRpcResponseStruct: Struct<{
     jsonrpc: "2.0";
     result: unknown;
     error?: {
+        data?: Json;
+        stack?: string;
         code: number;
         message: string;
-        data?: Json | undefined;
-        stack?: string | undefined;
     } | undefined;
 }, {
     id: Struct<string | number | null, null>;
     jsonrpc: Struct<"2.0", "2.0">;
     result: Struct<unknown, null>;
     error: Struct<{
+        data?: Json;
+        stack?: string;
         code: number;
         message: string;
-        data?: Json | undefined;
-        stack?: string | undefined;
-    } | undefined, {
-        code: Struct<number, null>;
-        message: Struct<string, null>;
-        data: Struct<Json | undefined, unknown>;
-        stack: Struct<string | undefined, null>;
-    }>;
+    } | undefined, unknown>;
 }>;
 /**
  * A JSON-RPC response object that has not yet been resolved.
@@ -193,11 +213,7 @@ export declare const JsonRpcSuccessStruct: Struct<{
     id: string | number | null;
     jsonrpc: "2.0";
     result: Json;
-}, {
-    id: Struct<string | number | null, null>;
-    jsonrpc: Struct<"2.0", "2.0">;
-    result: Struct<Json, unknown>;
-}>;
+}, unknown>;
 /**
  * A successful JSON-RPC response object.
  */
@@ -208,11 +224,7 @@ export declare const JsonRpcFailureStruct: Struct<{
     error: JsonRpcError;
     id: string | number | null;
     jsonrpc: "2.0";
-}, {
-    id: Struct<string | number | null, null>;
-    jsonrpc: Struct<"2.0", "2.0">;
-    error: Struct<JsonRpcError, unknown>;
-}>;
+}, unknown>;
 /**
  * A failed JSON-RPC response object.
  */
diff --git a/dist/types/json.d.ts.map b/dist/types/json.d.ts.map
index b8af457fd46d71f4687d6164df970f05e392966e..30b319e8e5c7d10f6b73fafb93b510d7ff6bea5e 100644
--- a/dist/types/json.d.ts.map
+++ b/dist/types/json.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"json.d.ts","sourceRoot":"","sources":["../../src/json.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"json.d.ts","sourceRoot":"","sources":["../../src/json.ts"],"names":[],"mappings":"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"}
\ No newline at end of file

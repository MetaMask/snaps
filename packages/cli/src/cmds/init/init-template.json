{
  "html": "<!doctype html>\n<html>\n  <head>\n    <title>Hello, Snaps!</title>\n    <link rel=\"icon\" type=\"image/svg\" href=\"./images/icon.svg\"/>\n  </head>\n\n  <body>\n    <h1>Hello, Snaps!</h1>\n    <details>\n      <summary>Instructions</summary>\n      <ul>\n        <li>First, click \"Connect\". Then, try out the other buttons!</li>\n        <li>Please note that:</li>\n        <ul>\n          <li>\n            The <code>snap.manifest.json</code> and <code>package.json</code> must be located in the server root directory..\n          </li>\n          <li>\n            The Snap bundle must be hosted at the location specified by the <code>location</code> field of <code>snap.manifest.json</code>.\n          </li>\n        </ul>\n      </ul>\n    </details>\n    <br/>\n\n    <button class=\"connect\">Connect</button>\n    <button class=\"sendHello\">Send Hello</button>\n  </body>\n\n  <script>\n    const snapId = `local:${window.location.href}`;\n\n    const connectButton = document.querySelector('button.connect')\n    const sendButton = document.querySelector('button.sendHello')\n\n    connectButton.addEventListener('click', connect)\n    sendButton.addEventListener('click', send)\n\n    // here we get permissions to interact with and install the snap\n    async function connect () {\n      await ethereum.request({\n        method: 'wallet_enable',\n        params: [{\n          wallet_snap: { [snapId]: {} },\n        }]\n      })\n    }\n\n    // here we call the snap's \"hello\" method\n    async function send () {\n      try {\n        const response = await ethereum.request({\n          method: 'wallet_invokeSnap',\n          params: [snapId, {\n            method: 'hello'\n          }]\n        })\n      } catch (err) {\n        console.error(err)\n        alert('Problem happened: ' + err.message || err)\n      }\n    }\n  </script>\n</html>\n",
  "source": "module.exports.onRpcRequest = async ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return wallet.request({\n        method: 'snap_confirm',\n        params: [\n          {\n            prompt: `Hello, ${origin}!`,\n            description:\n              'This custom confirmation is just for display purposes.',\n            textAreaContent:\n              'But you can edit the snap source code to make it do something, if you want to!',\n          },\n        ],\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n};\n",
  "typescriptHtml": "<!doctype html>\n<html>\n  </head>\n    <title>Hello, Snaps!</title>\n    <link rel=\"icon\" type=\"image/svg\" href=\"./images/icon.svg\"/>\n  </head>\n\n  <body>\n    <h1>Hello, Snaps!</h1>\n    <details>\n      <summary>Instructions</summary>\n      <ul>\n        <li>First, click \"Connect\". Then, try out the other buttons!</li>\n        <li>Please note that:</li>\n        <ul>\n          <li>\n            The <code>snap.manifest.json</code> and <code>package.json</code> must be located in the server root directory...\n          </li>\n          <li>\n            The Snap bundle must be hosted at the location specified by the <code>location</code> field of <code>snap.manifest.json</code>.\n          </li>\n        </ul>\n      </ul>\n    </details>\n    <br/>\n\n    <button class=\"connect\">Connect</button>\n    <button class=\"sendHello\">Send Hello</button>\n  </body>\n\n  <script>\n    const snapId = `local:${window.location.href}`;\n\n    const connectButton = document.querySelector('button.connect')\n    const sendButton = document.querySelector('button.sendHello')\n\n    connectButton.addEventListener('click', connect)\n    sendButton.addEventListener('click', send)\n\n    // here we get permissions to interact with and install the snap\n    async function connect () {\n      await ethereum.request({\n        method: 'wallet_enable',\n        params: [{\n          wallet_snap: { [snapId]: {} },\n        }]\n      })\n    }\n\n    // here we call the snap's \"hello\" method\n    async function send () {\n      try {\n        await ethereum.request({\n          method: 'wallet_invokeSnap',\n          params: [snapId, {\n            method: 'hello'\n          }]\n        })\n      } catch (err) {\n        console.error(err)\n        alert('Problem happened: ' + err.message || err)\n      }\n    }\n  </script>\n</html>\n",
  "typescriptSource": "import { OnRpcRequestHandler } from '@metamask/snap-types';\n\nexport const onRpcRequest: OnRpcRequestHandler = ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return wallet.request({\n        method: 'snap_confirm',\n        params: [\n          {\n            prompt: `Hello, ${origin}!`,\n            description:\n              'This custom confirmation is just for display purposes.',\n            textAreaContent:\n              'But you can edit the snap source code to make it do something, if you want to!',\n          },\n        ],\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n};\n",
  "typescriptConfig": "{\n  \"extends\": \"../../../../tsconfig.packages.json\",\n  \"compilerOptions\": {\n    \"typeRoots\": [\"../../../../node_modules/@types\"]\n  },\n  \"files\": [\"./node_modules/@metamask/snap-types/global.d.ts\"],\n  \"include\": [\"src\"]\n}\n",
  "icon": "<svg width=\"24\" height=\"25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.037 0H6.975C2.605 0 0 2.617 0 6.987v10.05c0 4.37 2.605 6.975 6.975 6.975h10.05c4.37 0 6.975-2.605 6.975-6.976V6.988C24.012 2.617 21.407 0 17.037 0ZM11.49 17.757c0 .36-.18.684-.492.876a.975.975 0 0 1-.54.156 1.11 1.11 0 0 1-.469-.108l-4.202-2.1a1.811 1.811 0 0 1-.985-1.61v-3.973c0-.36.18-.685.493-.877a1.04 1.04 0 0 1 1.008-.048l4.202 2.101a1.8 1.8 0 0 1 .997 1.609v3.974h-.012Zm-.252-6.423L6.723 8.896a1.045 1.045 0 0 1-.528-.924c0-.384.204-.744.528-.924l4.515-2.438a1.631 1.631 0 0 1 1.524 0l4.515 2.438c.324.18.528.528.528.924s-.204.744-.528.924l-4.515 2.438c-.24.132-.504.192-.768.192a1.54 1.54 0 0 1-.756-.192Zm7.972 3.638c0 .684-.385 1.308-.997 1.608l-4.202 2.101c-.144.072-.3.108-.468.108a.975.975 0 0 1-.54-.156 1.017 1.017 0 0 1-.493-.876v-3.974c0-.684.384-1.309.997-1.609l4.202-2.101a1.04 1.04 0 0 1 1.008.048c.313.192.493.516.493.877v3.974Z\" fill=\"#24272A\"/></svg>"
}

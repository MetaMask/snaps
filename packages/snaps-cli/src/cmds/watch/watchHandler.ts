import chokidar from 'chokidar';
import { YargsArgs } from '../../types/yargs';
import { bundle } from '../build/bundle';
import {
  logError,
  getOutfilePath,
  validateDirPath,
  validateFilePath,
  validateOutfileName,
} from '../../utils';
import { processEval, processManifestCheck } from './utils';

/**
 * Watch a directory and its subdirectories for changes, and build when files
 * are added or changed.
 *
 * Ignores 'node_modules' and dotfiles.
 * Creates destination directory if it doesn't exist.
 *
 * @param argv - arguments as an object generated by yargs
 * @param argv.src - The source file path
 * @param argv.dist - The output directory path
 * @param argv.'outfileName' - The output file name
 */
export async function watch(argv: YargsArgs): Promise<void> {
  const { src, dist, outfileName } = argv;
  if (outfileName) {
    validateOutfileName(outfileName as string);
  }
  await validateFilePath(src);
  await validateDirPath(dist, true);
  const rootDir =
    src.indexOf('/') === -1 ? '.' : src.substring(0, src.lastIndexOf('/') + 1);
  const outfilePath = getOutfilePath(dist, outfileName as string);

  const rebuild = async (path?: string, logMessage?: string) => {
    if (logMessage !== undefined) {
      console.log(logMessage);
    }

    try {
      await bundle(src, outfilePath, argv);
      await processManifestCheck(argv);
      await processEval({ ...argv, bundle: outfilePath });
    } catch (error) {
      logError(
        `Error ${
          path === undefined
            ? 'during initial build'
            : `while processing "${path}"`
        }.`,
        error,
      );
    }
  };

  chokidar
    .watch(rootDir, {
      ignoreInitial: true,
      ignored: [
        '**/node_modules/**',
        `**/${dist}/**`,
        `**/test/**`,
        `**/tests/**`,
        `**/*.test.js`,
        `**/*.test.ts`,
        /* istanbul ignore next */
        (str: string) => str !== '.' && str.startsWith('.'),
      ],
    })

    .on('ready', rebuild)
    .on('add', (path) => rebuild(path, `File added: ${path}`))
    .on('change', (path) => rebuild(path, `File changed: ${path}`))
    .on('unlink', (path) => console.log(`File removed: ${path}`))
    .on('error', (error: Error) => {
      logError(`Watcher error: ${error.message}`, error);
    })

    .add(rootDir);

  console.log(`Watching '${rootDir}' for changes...`);
}

{
  "html": "<!doctype html>\n\n<html>\n\n  </head>\n    <title>Hello Snaps!</title>\n  </head>\n\n  <body>\n    <h1>Hello Snaps!</h1>\n    <details>\n      <summary>Instructions</summary>\n      <ul>\n        <li>First, click \"Connect\". Then, try out the other buttons!</li>\n        <li>Please note that:</li>\n        <ul>\n          <li>\n            The Snap <b>package.json</b> must be located in located in the server root directory\n          </li>\n          <li>\n            The Snap bundle must be hosted at the location specified by <b>package.json:web3Wallet.bundle.url</b>\n          </li>\n        </ul>\n      </ul>\n    </details>\n    <br/>\n\n    <button class=\"connect\">Connect</button>\n    <button class=\"sendHello\">Send Hello</button>\n  </body>\n\n  <script>\n\n    // we identify the Snap by the location of its package.json file\n    const snapId = new URL('package.json', window.location.href).toString()\n\n    const connectButton = document.querySelector('button.connect')\n    const sendButton = document.querySelector('button.sendHello')\n\n    connectButton.addEventListener('click', connect)\n    sendButton.addEventListener('click', send)\n\n    // here we get permissions to interact with and install the plugin\n    async function connect () {\n      await ethereum.request({\n        method: 'wallet_enable',\n        params: [{\n          wallet_plugin: { [snapId]: {} },\n        }]\n      })\n    }\n\n    // here we call the plugin's \"hello\" method\n    async function send () {\n      try {\n        const response = await ethereum.request({\n          method: 'wallet_invokePlugin',\n          params: [snapId, {\n            method: 'hello'\n          }]\n        })\n      } catch (err) {\n        console.error(err)\n        alert('Problem happened: ' + err.message || err)\n      }\n    }\n\n  </script>\n\n</html>\n",
  "js": "wallet.registerRpcMessageHandler(async (originString, requestObject) => {\n  switch (requestObject.method) {\n    case 'hello':\n      return wallet.request({\n        method: 'alert',\n        params: [`Hello, ${originString}!`],\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n});\n"
}

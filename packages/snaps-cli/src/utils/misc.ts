import { promises as fs } from 'fs';
import path from 'path';

export const CONFIG_FILE = 'snap.config.js';
export const TS_CONFIG_FILE = 'snap.config.ts';

// CLI arguments whose values are file paths
const pathArguments = new Set([
  'src',
  's',
  'dist',
  'd',
  'bundle',
  'b',
  'root',
  'r',
]);

/**
 * Sanitizes inputs. Currently normalizes "./" paths to ".".
 * Yargs handles other path normalization as specified in builders.
 *
 * @param argv - Arguments as an object generated by yargs.
 */
export function sanitizeInputs(argv: Record<string, unknown>) {
  Object.keys(argv).forEach((key) => {
    if (typeof argv[key] === 'string') {
      // Node's path.normalize() does not do this
      if (argv[key] === './') {
        argv[key] = '.';
      }

      if (pathArguments.has(key)) {
        argv[key] = path.normalize(argv[key] as string);
      }
    }
  });
}

/**
 * Logs an error, attempts to unlink the destination file, and kills the
 * process.
 *
 * @param prefix - The message prefix.
 * @param message - The error message.
 * @param error - The original error.
 * @param destFilePath - The output file path.
 */
export async function writeError(
  prefix: string,
  message: string,
  error: Error,
  destFilePath?: string,
): Promise<void> {
  let processedPrefix = prefix;
  if (!prefix.endsWith(' ')) {
    processedPrefix += ' ';
  }

  if (destFilePath) {
    await fs.unlink(destFilePath);
  }

  throw new Error(`${processedPrefix}${message}\n${error.message}`);
}

/**
 * Trims leading and trailing periods "." and forward slashes "/" from the
 * given path string.
 *
 * @param pathString - The path string to trim.
 * @returns The trimmed path string.
 */
export function trimPathString(pathString: string): string {
  return pathString.replace(/^[./]+|[./]+$/gu, '');
}

const { writeFileSync } = require('fs');
const path = require('path');
const { Transpiler } = require('@json-schema-tools/transpiler');
const snapManifestSchema = require('../src/snaps/json-schemas/snap-manifest.schema.json');
const npmSnapPackageJsonSchema = require('../src/snaps/json-schemas/npm-snap-package-json.schema.json');

// A comment warning against modifying generated files.
const FILE_PREFIX =
  '// THIS IS A PROGRAMMATICALLY GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\n';

main();

/**
 * Main function of the script.
 */
function main() {
  [
    [snapManifestSchema, 'SnapManifest'],
    [npmSnapPackageJsonSchema, 'NpmSnapPackageJson'],
  ].forEach(([schema, primaryExportName]) => {
    writeSchema(transpileSchema(schema, primaryExportName), primaryExportName);
  });
}

/**
 * Transpiles a given JSON schema to TypeScript.
 *
 * @param {object} schema - The schema JSON.
 * @param {string} primaryExportName - The name of the primary export for the schema.
 * @returns {string} The TypeScript source code transpiled from the schema.
 */
function transpileSchema(schema, primaryExportName) {
  return FILE_PREFIX.concat(
    new Transpiler(schema)
      .toTypescript()
      // Get rid of all export statements
      .replace(/^export /gmu, '')
      // Convert all interfaces to object types for Json type compatibility
      .replace(/^interface (\w+) \{/gmu, 'type $1 = {')
      // Export the primary schema type only
      .replace(
        new RegExp(`^type ${primaryExportName}`, 'mu'),
        `export type ${primaryExportName}`,
      )
      // Add a newline because we like it better
      .concat('\n'),
  );
}

/**
 * Writes a transpiled schema to disk.
 *
 * @param {string} typeSource - The TypeScript source code resulting from the transpilation.
 * @param {string} primaryExportName - The name of the primary export for the schema.
 */
function writeSchema(typeSource, primaryExportName) {
  writeFileSync(
    path.resolve(
      __dirname,
      `../src/snaps/json-schemas/${primaryExportName}.ts`,
    ),
    typeSource,
  );
}
